use crate::lexer::Token;
use crate::ast::*;

grammar;

pub ValueDecl: SymbolDecl = {
	<s:Value> => SymbolDecl { name: s, visible: false, },
	<s:VisValue> => SymbolDecl { name: s, visible: true, },
};

pub BlockDecl: SymbolDecl = {
	<s:Block> => SymbolDecl { name: s, visible: false, },
	<s:VisBlock> => SymbolDecl { name: s, visible: true, },
};

pub LabelDecl: SymbolDecl = {
	<s:Label> => SymbolDecl { name: s, visible: false, },
	<s:VisLabel> => SymbolDecl { name: s, visible: true, },
};

Section:  String = { "!" <s:"txt"> => s };
Value:    String = { "%" <s:"txt"> => s };
Block:    String = { ":" <s:"txt"> => s };
Label:    String = { "." <s:"txt"> => s };
VisValue: String = { "%" "!" <s:"txt"> => s };
VisBlock: String = { ":" "!" <s:"txt"> => s };
VisLabel: String = { "." "!" <s:"txt"> => s };

extern {
	type Location = usize;
	type Error = ();

	enum Token {
		"eol" => Token::EOL,
		"sep" => Token::SEP,
	
		"txt" => Token::Identifier(<String>),
		"num" => Token::LitNumeric(<String>),
		"str" => Token::LitString(<String>),
		
		"pragma" => Token::KWPragma,
		"define" => Token::KWDefine,
		"reloc" => Token::KWReloc,
		"incl" => Token::KWIncl,
		"meta" => Token::KWMeta,
		"sect" => Token::KWSect,
		"code" => Token::KWCode,
		"data" => Token::KWData,
		"end" => Token::KWEnd,
		"multi" => Token::KWMulti,
		"array" => Token::KWArray,
		"reserve" => Token::KWReserve,
		"string" => Token::KWString,
		"only" => Token::KWOnly,
		
		"[" => Token::LSqParen,
		"]" => Token::RSqParen,
		"(" => Token::LParen,
		")" => Token::RParen,
		"@" => Token::At,
		"!" => Token::Bang,
		"%" => Token::Percent,
		":" => Token::Colon,
		"." => Token::Dot,
		"+" => Token::Plus,
		"-" => Token::Minus,
		"*" => Token::Mult,
		"$" => Token::Dollar,
		"#" => Token::Hash,
	}
}